class Warrior {
    protected int health = 50;
    protected int attack = 5;
    
    public boolean isAlive() {
        return health > 0;
    }

    public void takeDamage(int damage) {
        health -= damage;
        if (health < 0) {
            health = 0;
        }
    }

    public int getAttack() {
        return attack;
    }
}

class Knight extends Warrior {
    public Knight() {
        this.attack = 7;
    }
}

class Defender extends Warrior {
    private int defense = 2;

    public Defender() {
        this.health = 60;
        this.attack = 3;
    }

    @Override
    public void takeDamage(int damage) {
        int reducedDamage = Math.max(0, damage - defense);
        super.takeDamage(reducedDamage);
    }
}

class Vampire extends Warrior {
    private int vampirism = 50; // Percentage

    public Vampire() {
        this.health = 40;
        this.attack = 4;
    }

    @Override
    public void takeDamage(int damage) {
        super.takeDamage(damage);
    }

    public void heal(int damageDealt) {
        int healing = (damageDealt * vampirism) / 100;
        this.health += healing;
    }
}

class Lancer extends Warrior {
    public Lancer() {
        this.health = 50;
        this.attack = 6;
    }

    public int getSecondaryAttack() {
        return this.attack / 2;
    }
}

class Army {
    private LinkedList<Warrior> units = new LinkedList<>();

    public void addUnits(Class<? extends Warrior> unitType, int number) {
        try {
            for (int i = 0; i < number; i++) {
                units.add(unitType.getDeclaredConstructor().newInstance());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public Warrior getFirstUnit() {
        return units.isEmpty() ? null : units.getFirst();
    }

    public void removeDeadUnit() {
        if (!units.isEmpty() && !units.getFirst().isAlive()) {
            units.removeFirst();
        }
    }

    public boolean isDefeated() {
        return units.isEmpty();
    }
}

class Battle {
    public static boolean fight(Warrior warrior1, Warrior warrior2) {
        while (warrior1.isAlive() && warrior2.isAlive()) {
            warrior2.takeDamage(warrior1.getAttack());
            if (warrior2.isAlive()) {
                warrior1.takeDamage(warrior2.getAttack());
            }
        }
        return warrior1.isAlive();
    }

    public static boolean fight(Army army1, Army army2) {
        while (!army1.isDefeated() && !army2.isDefeated()) {
            Warrior unit1 = army1.getFirstUnit();
            Warrior unit2 = army2.getFirstUnit();
            if (fight(unit1, unit2)) {
                army2.removeDeadUnit();
            } else {
                army1.removeDeadUnit();
            }
        }
        return !army1.isDefeated();
    }
}
