class Warrior {
    protected int health;
    protected int attack;
    protected int defense;
    protected boolean isAlive;

    public Warrior() {
        this.health = 50;
        this.attack = 5;
        this.defense = 0;
        this.isAlive = true;
    }

    public int getHealth() {
        return health;
    }

    public int getAttack() {
        return attack;
    }

    public boolean isAlive() {
        return isAlive;
    }

    public void takeDamage(int damage) {
        int damageTaken = Math.max(damage - defense, 0);
        health -= damageTaken;
        if (health <= 0) {
            isAlive = false;
        }
    }
}

class Knight extends Warrior {
    public Knight() {
        this.attack = 7;
    }
}

class Defender extends Warrior {
    public Defender() {
        this.health = 60;
        this.attack = 3;
        this.defense = 2;
    }

    @Override
    public void takeDamage(int damage) {
        int damageTaken = Math.max(damage - defense, 0);
        health -= damageTaken;
        if (health <= 0) {
            isAlive = false;
        }
    }
}

class Vampire extends Warrior {
    private int vampirism;

    public Vampire() {
        this.health = 40;
        this.attack = 4;
        this.vampirism = 50; // Representing 50% vampirism
    }

    @Override
    public void takeDamage(int damage) {
        super.takeDamage(damage);
    }

    public void heal(int dealtDamage) {
        int healAmount = (dealtDamage * vampirism) / 100;
        this.health = Math.min(this.health + healAmount, 40); // Max health for Vampire is 40
    }
}

class Battle {
    public static boolean fight(Warrior warrior1, Warrior warrior2) {
        while (warrior1.isAlive() && warrior2.isAlive()) {
            warrior2.takeDamage(warrior1.getAttack());
            if (warrior2.isAlive() && warrior1 instanceof Vampire) {
                ((Vampire) warrior1).heal(warrior1.getAttack());
            }
            if (!warrior2.isAlive()) {
                return true;
            }

            warrior1.takeDamage(warrior2.getAttack());
            if (warrior1.isAlive() && warrior2 instanceof Vampire) {
                ((Vampire) warrior2).heal(warrior2.getAttack());
            }
        }
        return warrior1.isAlive();
    }
}
