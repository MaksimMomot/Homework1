class Warrior {
    protected int health = 50;
    protected int attack = 5;

    public boolean isAlive() {
        return health > 0;
    }

    public int getAttack() {
        return attack;
    }

    public void takeDamage(int damage) {
        health -= damage;
    }
}

class Knight extends Warrior {
    public Knight() {
        this.attack = 7;
    }
}

class Army {
    private final List<Warrior> units = new ArrayList<>();

    public void addUnits(Class<? extends Warrior> warriorClass, int count) {
        try {
            for (int i = 0; i < count; i++) {
                units.add(warriorClass.getDeclaredConstructor().newInstance());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public boolean hasUnits() {
        return !units.isEmpty();
    }

    public Warrior getNextUnit() {
        if (hasUnits()) {
            return units.get(0);
        }
        return null;
    }

    public void removeUnit() {
        if (hasUnits()) {
            units.remove(0);
        }
    }
}

class Battle {
    public boolean fight(Army army1, Army army2) {
        while (army1.hasUnits() && army2.hasUnits()) {
            Warrior warrior1 = army1.getNextUnit();
            Warrior warrior2 = army2.getNextUnit();

            if (duel(warrior1, warrior2)) {
                army2.removeUnit();
            } else {
                army1.removeUnit();
            }
        }
        return army1.hasUnits();
    }

    private boolean duel(Warrior warrior1, Warrior warrior2) {
        while (warrior1.isAlive() && warrior2.isAlive()) {
            warrior2.takeDamage(warrior1.getAttack());
            if (warrior2.isAlive()) {
                warrior1.takeDamage(warrior2.getAttack());
            }
        }
        return warrior1.isAlive();
    }
}

public class Main {
    public static void main(String[] args) {
        Army army1 = new Army();
        Army army2 = new Army();

        army1.addUnits(Knight.class, 3);
        army2.addUnits(Warrior.class, 4);

        Battle battle = new Battle();
        System.out.println(battle.fight(army1, army2)); // Output: true or false depending on the result
    }
}
