import random

class Fighter:
    def __init__(self, name, health, attack_power):
        self.name = name
        self.health = health
        self.attack_power = attack_power
        self.is_alive = True

    def attack(self, opponent):
        if self.is_alive:
            opponent.health -= self.attack_power
            if opponent.health <= 0:
                opponent.is_alive = False

class Warrior(Fighter):
    def __init__(self):
        # Warriors have 100 health and a random attack power between 10 and 30
        super().__init__(name="Warrior", health=100, attack_power=random.randint(10, 30))

class Knight(Fighter):
    def __init__(self):
        # Knights have 120 health and a random attack power between 15 and 25
        super().__init__(name="Knight", health=120, attack_power=random.randint(15, 25))

class Defender(Fighter):
    def __init__(self):
        # Defenders have 150 health and a random attack power between 5 and 15
        super().__init__(name="Defender", health=150, attack_power=random.randint(5, 15))

def fight(fighter1, fighter2):
    # Simulates a fight until one fighter is no longer alive
    while fighter1.is_alive and fighter2.is_alive:
        fighter1.attack(fighter2)
        if fighter2.is_alive:
            fighter2.attack(fighter1)

    return fighter1.is_alive  # Returns True if fighter1 wins

# Example usage
if __name__ == "__main__":
    chuck = Warrior()
    bruce = Warrior()
    carl = Knight()
    dave = Warrior()
    mark = Warrior()
    bob = Defender()
    mike = Knight()
    rog = Warrior()
    lancelot = Defender()

    # Test fights
    assert fight(chuck, bruce) == True
    assert fight(dave, carl) == False
    assert fight(mark, bob) == True  # Example assertion, you can change the fighters
    assert fight(mike, rog) == False  # Example assertion
    assert fight(lancelot, carl) == True  # Example assertion

    print("All assertions passed!")
